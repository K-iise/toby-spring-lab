<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- @Transaction이 붙은 타입과 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록 -->
    <tx:annotation-driven/>

    <!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->
    <context:annotation-config/>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource" >
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/testdb"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>

    <!-- 타깃 -->
    <bean id="userService" class="hello.springbook.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="mailSender" ref="mailSender"/>
    </bean>

    <!-- 팩토리 빈 설정-->
    <bean id="message" class="hello.springbook.user.learningtest.factorybean.MessageFactoryBean">
        <property name="text" value="Factory Bean"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- aop 네임 스페이스를 적용한 AOP 설정 빈-->
    <!-- 기존의 설정한 pointcut, advisor 빈들을 aop 태그를 이용하여 정의함.-->
    <!-- 관련 빈들을 의미가 잘 드러나는 독립된 전용 태그를 사용하여 이해하기 쉽고 코드의 양이 줄음-->
    <aop:config>
        <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
    </aop:config>

    <!-- tx 네임 스페이스를 적용한 tx 설정 빈-->
    <tx:advice id="transactionAdvice">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 자동 프록시 생성기 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <!-- 테스트용 UserService의 등록 -->
    <bean id="testUserService" class="hello.springbook.user.service.UserServiceTest$TestUserService"
          parent="userService"/>

    <bean id="mailSender" class="hello.springbook.user.service.DummyMailSender">
    </bean>

    <bean id="userDao" class="hello.springbook.user.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/>
        <property name="sqlService" ref="sqlService"/>
    </bean>

    <bean id="sqlService" class="hello.springbook.user.sqlservice.OxmSqlService">
        <property name="unmarshaller" ref="unmarshaller"/>
        <property name="sqlmap" value="/main-sqlmap.xml"/>
        <property name="sqlRegistry" ref="sqlRegistry"/>
    </bean>

    <bean id="sqlRegistry" class="hello.springbook.user.sqlservice.updatable.EmbeddedDbSqlRegistry">
        <property name="dataSource" ref="embeddedDatabase"/>
    </bean>

    <bean id="sqlReader" class="hello.springbook.user.sqlservice.JaxbXmlSqlReader">
        <property name="sqlmapFile" value="/main-sqlmap.xml"/>
    </bean>

    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="hello.springbook.user.sqlservice.jaxb"/>
    </bean>

    <!-- 내장형 DB 등록 -->
    <jdbc:embedded-database id="embeddedDatabase">
        <jdbc:script location="classpath:sqlRegistrySchema.sql"/>
    </jdbc:embedded-database>
</beans>